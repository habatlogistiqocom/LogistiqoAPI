/*
 * LogistiqoAPI
 *   - Go to [Swagger Editor](https://editor.swagger.io/?url=https://raw.githubusercontent.com/habatlogistiqocom/logistiqoSwaggerYaml/main/logistiqoSwaggerYaml.yaml)   An API, or Application Programming Interface, is a set of protocols,   routines, and tools that enable different software applications to   communicate and exchange data with each other. It defines how software   components should interact and helps to simplify software development by   abstracting the underlying implementation. APIs are essential for building   complex and interconnected software systems.       ## Contact Us     If you have problems or questions, please read the following information:     - [FAQ](https://www.logistiqo.com/faq/)    - [Contact us](https://www.logistiqo.com/contact.php)     To stay informed about the latest developments, you can     - Follow us on [Twitter](https://twitter.com/logistiqo/),
 *
 * OpenAPI spec version: 1.0
 * Contact: info@logistiqo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ResponseStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-10-19T13:45:14.600795045Z[GMT]")

public class ResponseStatus {
  @SerializedName("status")
  private String status = null;

  @SerializedName("error")
  private Boolean error = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("details")
  private List<String> details = null;

  public ResponseStatus status(String status) {
    this.status = status;
    return this;
  }

   /**
   * :&gt;- Status as in Response Header.
   * @return status
  **/
  @Schema(example = "200", description = ":>- Status as in Response Header.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ResponseStatus error(Boolean error) {
    this.error = error;
    return this;
  }

   /**
   * :&gt;- Indicates an error if true.
   * @return error
  **/
  @Schema(example = "true", description = ":>- Indicates an error if true.")
  public Boolean isError() {
    return error;
  }

  public void setError(Boolean error) {
    this.error = error;
  }

  public ResponseStatus message(String message) {
    this.message = message;
    return this;
  }

   /**
   * :&gt;- This field contains free text that provides information about the outcome of the import process. If the import is successful, it will describe the result of the process. However, in case of errors, it will provide details about the issues encountered. Common Errors - Missing Fields, Some required fields were not provided in the API request, which caused the import process to fail. - Incorrect Fields, The data provided for certain fields in the API request was not in the expected format or did not meet the validation requirements, resulting in an error during import.
   * @return message
  **/
  @Schema(example = "The Manifest 1234567 was created successfully", description = ":>- This field contains free text that provides information about the outcome of the import process. If the import is successful, it will describe the result of the process. However, in case of errors, it will provide details about the issues encountered. Common Errors - Missing Fields, Some required fields were not provided in the API request, which caused the import process to fail. - Incorrect Fields, The data provided for certain fields in the API request was not in the expected format or did not meet the validation requirements, resulting in an error during import.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ResponseStatus details(List<String> details) {
    this.details = details;
    return this;
  }

  public ResponseStatus addDetailsItem(String detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<String>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * :&gt;- List of details, including incorrect shipments, missing required fields, and other validation errors.
   * @return details
  **/
  @Schema(description = ":>- List of details, including incorrect shipments, missing required fields, and other validation errors.")
  public List<String> getDetails() {
    return details;
  }

  public void setDetails(List<String> details) {
    this.details = details;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseStatus responseStatus = (ResponseStatus) o;
    return Objects.equals(this.status, responseStatus.status) &&
        Objects.equals(this.error, responseStatus.error) &&
        Objects.equals(this.message, responseStatus.message) &&
        Objects.equals(this.details, responseStatus.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, error, message, details);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseStatus {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
